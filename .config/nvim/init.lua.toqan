-- ~/.config/nvim/init.lua
-- Comprehensive development environment for PHP, TypeScript, MySQL, Bash, Docker
-- Features: Telescope, Treesitter, Which-Key, Persistence, Formatting, Debugging, HTTP Client, Notes

-- Bootstrap lazy.nvim
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not (vim.uv or vim.loop).fs_stat(lazypath) then
    local lazyrepo = "https://github.com/folke/lazy.nvim.git"
    local out = vim.fn.system({ "git", "clone", "--filter=blob:none", "--branch=stable", lazyrepo, lazypath })
    if vim.v.shell_error ~= 0 then
        vim.api.nvim_echo({
            { "Failed to clone lazy.nvim:\n", "ErrorMsg" },
            { out,                            "WarningMsg" },
            { "\nPress any key to exit..." },
        }, true, {})
        vim.fn.getchar()
        os.exit(1)
    end
end
vim.opt.rtp:prepend(lazypath)


-- =============================================================================
-- BASIC SETTINGS
-- =============================================================================

-- Leader keys
vim.g.mapleader = " "
vim.g.maplocalleader = ","

-- Disable netrw (we're using neo-tree)
vim.g.loaded_netrw = 1
vim.g.loaded_netrwPlugin = 1

-- Essential settings
vim.opt.number = true
vim.opt.relativenumber = true
vim.opt.expandtab = true
vim.opt.shiftwidth = 4
vim.opt.tabstop = 4
vim.opt.smartindent = true
vim.opt.wrap = false
vim.opt.swapfile = false
vim.opt.backup = false
vim.opt.undodir = os.getenv("HOME") .. "/.vim/undodir"
vim.opt.undofile = true
vim.opt.hlsearch = false
vim.opt.incsearch = true
vim.opt.termguicolors = true
vim.opt.scrolloff = 8
vim.opt.signcolumn = "yes"
vim.opt.updatetime = 50
vim.opt.colorcolumn = "120"

-- File-specific settings
vim.api.nvim_create_autocmd("FileType", {
    pattern = { "typescript", "javascript", "json", "html", "css", "yaml" },
    callback = function()
        vim.opt_local.shiftwidth = 2
        vim.opt_local.tabstop = 2
    end,
})

-- =============================================================================
-- PLUGIN CONFIGURATION
-- =============================================================================

require("lazy").setup({

    -- =============================================================================
    -- SESSION PERSISTENCE - Branch and folder level session management
    -- =============================================================================
    {
        "folke/persistence.nvim",
        event = "BufReadPre",
        config = function()
            require("persistence").setup({
                dir = vim.fn.expand(vim.fn.stdpath("state") .. "/sessions/"),
                options = { "buffers", "curdir", "tabpages", "winsize", "help", "globals", "skiprtp" },
            })

            -- Custom session management with branch and folder awareness
            local function get_session_name()
                local cwd = vim.fn.getcwd()
                local cwd_name = vim.fn.fnamemodify(cwd, ":t")

                local git_branch = ""
                local handle = io.popen("cd " .. cwd .. " && git branch --show-current 2>/dev/null")
                if handle then
                    git_branch = handle:read("*a"):gsub("\n", "")
                    handle:close()
                end

                local session_name = cwd_name
                if git_branch ~= "" then
                    session_name = cwd_name .. "_" .. git_branch
                end

                return session_name:gsub("[^%w_-]", "_")
            end

            -- Auto-save/load session management
            vim.api.nvim_create_autocmd("VimLeavePre", {
                callback = function()
                    local session_name = get_session_name()
                    require("persistence").save(session_name)
                end,
            })

            vim.api.nvim_create_autocmd("VimEnter", {
                nested = true,
                callback = function()
                    if vim.fn.argc() == 0 then
                        local session_name = get_session_name()
                        require("persistence").load(session_name)
                    end
                end,
            })

            -- Session keymaps
            vim.keymap.set("n", "<leader>qs", function()
                local session_name = get_session_name()
                require("persistence").save(session_name)
                print("Session saved: " .. session_name)
            end, { desc = "Save current session" })

            vim.keymap.set("n", "<leader>ql", function()
                local session_name = get_session_name()
                require("persistence").load(session_name)
                print("Session loaded: " .. session_name)
            end, { desc = "Load current session" })

            vim.keymap.set("n", "<leader>qd", function()
                require("persistence").stop()
                print("Session recording stopped")
            end, { desc = "Stop session recording" })
        end,
    },


    -- =============================================================================
    -- WHICH-KEY - Key discovery and documentation
    -- =============================================================================
    {
        "folke/which-key.nvim",
        event = "VeryLazy",
        config = function()
            require("which-key").setup({
                plugins = {
                    marks = true,
                    registers = true,
                    spelling = { enabled = true, suggestions = 20 },
                },
                window = {
                    border = "rounded",
                    position = "bottom",
                    margin = { 1, 0, 1, 0 },
                    padding = { 2, 2, 2, 2 },
                    winblend = 0
                },
                layout = {
                    height = { min = 4, max = 25 },
                    width = { min = 20, max = 50 },
                    spacing = 3,
                    align = "left",
                },
            })

            -- Register key groups
            require("which-key").register({
                { "<leader>b", group = "Buffers" },
                { "<leader>c", group = "Code/Comments/AI" },
                { "<leader>d", group = "Debug/Docker" },
                { "<leader>e", group = "Explorer/Edit" },
                { "<leader>f", group = "Find/Files (Telescope)" },
                { "<leader>g", group = "Git" },
                { "<leader>h", group = "HTTP/Help" },
                { "<leader>l", group = "LSP" },
                { "<leader>n", group = "Notes" },
                { "<leader>q", group = "Session/Quit" },
                { "<leader>t", group = "Terminal/Tests" },
                { "<leader>w", group = "Windows" },
                { "<leader>x", group = "Formatting/Fix" },
            })
        end,
    },

    -- =============================================================================
    -- NEO-TREE - File explorer (replaces netrw)
    -- =============================================================================
    {
        "nvim-neo-tree/neo-tree.nvim",
        branch = "v3.x",
        dependencies = {
            "nvim-lua/plenary.nvim",
            "nvim-tree/nvim-web-devicons",
            "MunifTanjim/nui.nvim",
        },
        config = function()
            require("neo-tree").setup({
                close_if_last_window = false,
                popup_border_style = "rounded",
                enable_git_status = true,
                enable_diagnostics = true,
                open_files_do_not_replace_types = { "terminal", "trouble", "qf" },
                sort_case_insensitive = false,
                default_component_configs = {
                    container = {
                        enable_character_fade = true
                    },
                    indent = {
                        indent_size = 2,
                        padding = 1,
                        with_markers = true,
                        indent_marker = "│",
                        last_indent_marker = "└",
                        highlight = "NeoTreeIndentMarker",
                        with_expanders = nil,
                        expander_collapsed = "",
                        expander_expanded = "",
                        expander_highlight = "NeoTreeExpander",
                    },
                    icon = {
                        folder_closed = "",
                        folder_open = "",
                        folder_empty = "ﰊ",
                        default = "*",
                        highlight = "NeoTreeFileIcon"
                    },
                    modified = {
                        symbol = "[+]",
                        highlight = "NeoTreeModified",
                    },
                    name = {
                        trailing_slash = false,
                        use_git_status_colors = true,
                        highlight = "NeoTreeFileName",
                    },
                    git_status = {
                        symbols = {
                            added     = "✚",
                            modified  = "",
                            deleted   = "✖",
                            renamed   = "",
                            untracked = "",
                            ignored   = "",
                            unstaged  = "",
                            staged    = "",
                            conflict  = "",
                        }
                    },
                },
                window = {
                    position = "left",
                    width = 40,
                    mapping_options = {
                        noremap = true,
                        nowait = true,
                    },
                    mappings = {
                        ["<space>"] = {
                            "toggle_node",
                            nowait = false,
                        },
                        ["<2-LeftMouse>"] = "open",
                        ["<cr>"] = "open",
                        ["<esc>"] = "revert_preview",
                        ["P"] = { "toggle_preview", config = { use_float = true } },
                        ["l"] = "focus_preview",
                        ["S"] = "open_split",
                        ["s"] = "open_vsplit",
                        ["t"] = "open_tabnew",
                        ["w"] = "open_with_window_picker",
                        ["C"] = "close_node",
                        ["z"] = "close_all_nodes",
                        ["Z"] = "expand_all_nodes",
                        ["a"] = {
                            "add",
                            config = {
                                show_path = "none"
                            }
                        },
                        ["A"] = "add_directory",
                        ["d"] = "delete",
                        ["r"] = "rename",
                        ["y"] = "copy_to_clipboard",
                        ["x"] = "cut_to_clipboard",
                        ["p"] = "paste_from_clipboard",
                        ["c"] = "copy",
                        ["m"] = "move",
                        ["q"] = "close_window",
                        ["R"] = "refresh",
                        ["?"] = "show_help",
                        ["<"] = "prev_source",
                        [">"] = "next_source",
                    }
                },
                nesting_rules = {},
                filesystem = {
                    filtered_items = {
                        visible = false,
                        hide_dotfiles = true,
                        hide_gitignored = true,
                        hide_hidden = true,
                        hide_by_name = {
                            "node_modules"
                        },
                        hide_by_pattern = {
                            "*.meta",
                            "*/src/*/tsconfig.json",
                        },
                        always_show = {
                            ".gitignored",
                            ".env",
                        },
                        never_show = {
                            ".DS_Store",
                            "thumbs.db"
                        },
                        never_show_by_pattern = {
                            ".null-ls_*",
                        },
                    },
                    follow_current_file = {
                        enabled = false,
                        leave_dirs_open = false,
                    },
                    group_empty_dirs = false,
                    hijack_netrw_behavior = "open_default",
                    use_libuv_file_watcher = false,
                    window = {
                        mappings = {
                            ["<bs>"] = "navigate_up",
                            ["."] = "set_root",
                            ["H"] = "toggle_hidden",
                            ["/"] = "fuzzy_finder",
                            ["D"] = "fuzzy_finder_directory",
                            ["#"] = "fuzzy_sorter",
                            ["f"] = "filter_on_submit",
                            ["<c-x>"] = "clear_filter",
                            ["[g"] = "prev_git_modified",
                            ["]g"] = "next_git_modified",
                        }
                    }
                },
                buffers = {
                    follow_current_file = {
                        enabled = true,
                        leave_dirs_open = false,
                    },
                    group_empty_dirs = true,
                    show_unloaded = true,
                    window = {
                        mappings = {
                            ["bd"] = "buffer_delete",
                            ["<bs>"] = "navigate_up",
                            ["."] = "set_root",
                        }
                    },
                },
                git_status = {
                    window = {
                        position = "float",
                        mappings = {
                            ["A"]  = "git_add_all",
                            ["gu"] = "git_unstage_file",
                            ["ga"] = "git_add_file",
                            ["gr"] = "git_revert_file",
                            ["gc"] = "git_commit",
                            ["gp"] = "git_push",
                            ["gg"] = "git_commit_and_push",
                        }
                    }
                }
            })

            -- Neo-tree keymaps
            vim.keymap.set('n', '<leader>ee', ':Neotree toggle<CR>', { desc = "Toggle file explorer" })
            vim.keymap.set('n', '<leader>ef', ':Neotree focus<CR>', { desc = "Focus file explorer" })
            vim.keymap.set('n', '<leader>eg', ':Neotree float git_status<CR>', { desc = "Git status" })
            vim.keymap.set('n', '<leader>eb', ':Neotree toggle show buffers right<CR>', { desc = "Buffer explorer" })
        end,
    },

    -- =============================================================================
    -- TELESCOPE - Main filter window and fuzzy finder
    -- =============================================================================
    {
        'nvim-telescope/telescope.nvim',
        tag = '0.1.8',
        dependencies = {
            'nvim-lua/plenary.nvim',
            'nvim-tree/nvim-web-devicons',
            { 'nvim-telescope/telescope-fzf-native.nvim', build = 'make' },
        },
        config = function()
            local telescope = require('telescope')
            local actions = require('telescope.actions')

            telescope.setup({
                defaults = {
                    prompt_prefix = "🔍 ",
                    selection_caret = "➤ ",
                    entry_prefix = "  ",
                    initial_mode = "insert",
                    selection_strategy = "reset",
                    sorting_strategy = "descending",
                    layout_strategy = "horizontal",
                    layout_config = {
                        horizontal = { mirror = false, preview_width = 0.6 },
                        vertical = { mirror = false },
                        height = 0.9,
                        width = 0.9,
                    },
                    file_sorter = require('telescope.sorters').get_fuzzy_file,
                    generic_sorter = require('telescope.sorters').get_generic_fuzzy_sorter,
                    winblend = 0,
                    border = {},
                    borderchars = { "─", "│", "─", "│", "╭", "╮", "╯", "╰" },
                    color_devicons = true,
                    use_less = true,
                    path_display = {},
                    set_env = { ['COLORTERM'] = 'truecolor' },
                    file_previewer = require('telescope.previewers').vim_buffer_cat.new,
                    grep_previewer = require('telescope.previewers').vim_buffer_vimgrep.new,
                    qflist_previewer = require('telescope.previewers').vim_buffer_qflist.new,
                    buffer_previewer_maker = require('telescope.previewers').buffer_previewer_maker,
                    mappings = {
                       i = {
                            ["<C-n>"] = actions.cycle_history_next,
                            ["<C-p>"] = actions.cycle_history_prev,
                            ["<C-j>"] = actions.move_selection_next,
                            ["<C-k>"] = actions.move_selection_previous,
                            ["<C-c>"] = actions.close,
                            ["<CR>"] = actions.select_default,
                            ["<C-x>"] = actions.select_horizontal,
                            ["<C-v>"] = actions.select_vertical,
                            ["<C-t>"] = actions.select_tab,
                        },
                        n = {
                            ["<esc>"] = actions.close,
                            ["<CR>"] = actions.select_default,
                            ["<C-x>"] = actions.select_horizontal,
                            ["<C-v>"] = actions.select_vertical,
                            ["<C-t>"] = actions.select_tab,
                        },
                    },
                },
                pickers = {
                    find_files = {
                        find_command = { "rg", "--files", "--hidden", "--glob", "!**/.git/*" },
                    },
                    live_grep = {
                        additional_args = function()
                            return { "--hidden", "--glob", "!**/.git/*" }
                        end
                    },
                },
                extensions = {
                    fzf = {
                        fuzzy = true,
                        override_generic_sorter = true,
                        override_file_sorter = true,
                        case_mode = "smart_case",
                    }
                }
            })

            telescope.load_extension('fzf')

            local builtin = require('telescope.builtin')

            -- Main telescope keymaps
            vim.keymap.set('n', '<leader>ff', builtin.find_files, { desc = 'Find files' })
            vim.keymap.set('n', '<leader>fg', builtin.live_grep, { desc = 'Live grep' })
            vim.keymap.set('n', '<leader>fb', builtin.buffers, { desc = 'Find buffers' })
            vim.keymap.set('n', '<leader>fh', builtin.help_tags, { desc = 'Help tags' })
            vim.keymap.set('n', '<leader>fr', builtin.oldfiles, { desc = 'Recent files' })
            vim.keymap.set('n', '<leader>fc', builtin.commands, { desc = 'Commands' })
            vim.keymap.set('n', '<leader>fk', builtin.keymaps, { desc = 'Keymaps' })
            vim.keymap.set('n', '<leader>fs', builtin.grep_string, { desc = 'Grep string under cursor' })

            -- Development specific searches
            vim.keymap.set('n', '<leader>fd', function()
                builtin.find_files({
                    prompt_title = "Docker Files",
                    find_command = { "rg", "--files", "--glob", "*docker*", "--glob", "*.dockerfile", "--glob", "Dockerfile*" }
                })
            end, { desc = 'Find Docker files' })

            vim.keymap.set('n', '<leader>fp', function()
                builtin.find_files({
                    prompt_title = "PHP Files",
                    find_command = { "rg", "--files", "--type", "php" }
                })
            end, { desc = 'Find PHP files' })

            vim.keymap.set('n', '<leader>ft', function()
                builtin.find_files({
                    prompt_title = "TypeScript Files",
                    find_command = { "rg", "--files", "--type", "ts", "--type", "js" }
                })
            end, { desc = 'Find TypeScript/JS files' })

            vim.keymap.set('n', '<leader>fq', function()
                builtin.find_files({
                    prompt_title = "SQL Files",
                    find_command = { "rg", "--files", "--glob", "*.sql", "--glob", "*.mysql" }
                })
            end, { desc = 'Find SQL files' })

            -- Git integration
            vim.keymap.set('n', '<leader>gc', builtin.git_commits, { desc = 'Git commits' })
            vim.keymap.set('n', '<leader>gb', builtin.git_branches, { desc = 'Git branches' })
            vim.keymap.set('n', '<leader>gs', builtin.git_status, { desc = 'Git status' })

            -- LSP integration
            vim.keymap.set('n', '<leader>lr', builtin.lsp_references, { desc = 'LSP references' })
            vim.keymap.set('n', '<leader>ld', builtin.lsp_definitions, { desc = 'LSP definitions' })
            vim.keymap.set('n', '<leader>li', builtin.lsp_implementations, { desc = 'LSP implementations' })
            vim.keymap.set('n', '<leader>ls', builtin.lsp_document_symbols, { desc = 'Document symbols' })
            vim.keymap.set('n', '<leader>lw', builtin.lsp_workspace_symbols, { desc = 'Workspace symbols' })
        end,
    },

    -- =============================================================================
    -- TREESITTER - Enhanced syntax highlighting and parsing
    -- =============================================================================
    {
        "nvim-treesitter/nvim-treesitter",
        build = ":TSUpdate",
        dependencies = {
            "nvim-treesitter/nvim-treesitter-textobjects",
            "nvim-treesitter/nvim-treesitter-context",
        },
        config = function()
            require("nvim-treesitter.configs").setup({
                ensure_installed = {
                    -- Core languages
                    "php", "phpdoc",
                    "typescript", "javascript", "tsx",
                    "sql",
                    "bash", "fish",
                    "dockerfile",
                    -- Supporting languages
                    "html", "css", "scss",
                    "json", "yaml", "toml",
                    "markdown", "markdown_inline",
                    "lua", "vim", "vimdoc", "query",
                    "git_config", "git_rebase", "gitcommit", "gitignore",
                    "regex", "http",
                },
                sync_install = false,
                auto_install = true,
                highlight = {
                    enable = true,
                    additional_vim_regex_highlighting = false,
                },
                indent = {
                    enable = true,
                    disable = { "yaml" },
                },
                incremental_selection = {
                    enable = true,
                    keymaps = {
                        init_selection = "<C-space>",
                        node_incremental = "<C-space>",
                        scope_incremental = "<C-s>",
                        node_decremental = "<M-space>",
                    },
                },
                textobjects = {
                    select = {
                        enable = true,
                        lookahead = true,
                        keymaps = {
                            ["af"] = "@function.outer",
                            ["if"] = "@function.inner",
                            ["ac"] = "@class.outer",
                            ["ic"] = "@class.inner",
                            ["aa"] = "@parameter.outer",
                            ["ia"] = "@parameter.inner",
                        },
                    },
                    move = {
                        enable = true,
                        set_jumps = true,
                        goto_next_start = {
                            ["]m"] = "@function.outer",
                            ["]]"] = "@class.outer",
                        },
                        goto_next_end = {
                            ["]M"] = "@function.outer",
                            ["]["] = "@class.outer",
                        },
                        goto_previous_start = {
                            ["[m"] = "@function.outer",
                            ["[["] = "@class.outer",
                        },
                        goto_previous_end = {
                            ["[M"] = "@function.outer",
                            ["[]"] = "@class.outer",
                        },
                    },
                },
            })

            require("treesitter-context").setup({
                enable = true,
                max_lines = 3,
                min_window_height = 0,
                line_numbers = true,
                multiline_threshold = 20,
                trim_scope = 'outer',
                mode = 'cursor',
                separator = nil,
                zindex = 20,
            })
        end,
    },

    -- =============================================================================
    -- COMMENTS - Easy commenting with Comment.nvim
    -- =============================================================================
    {
        'numToStr/Comment.nvim',
        config = function()
            require('Comment').setup({
                padding = true,
                sticky = true,
                ignore = nil,
                toggler = {
                    line = 'gcc',
                    block = 'gbc',
                },
                opleader = {
                    line = 'gc',
                    block = 'gb',
                },
                extra = {
                    above = 'gcO',
                    below = 'gco',
                    eol = 'gcA',
                },
                mappings = {
                    basic = true,
                    extra = true,
                },
                pre_hook = nil,
                post_hook = nil,
            })

            -- Additional comment keymaps
            vim.keymap.set('n', '<leader>cc', function()
                require('Comment.api').toggle.linewise.current()
            end, { desc = 'Toggle comment line' })

            vim.keymap.set('v', '<leader>cc', function()
                local esc = vim.api.nvim_replace_termcodes('<ESC>', true, false, true)
                vim.api.nvim_feedkeys(esc, 'nx', false)
                require('Comment.api').toggle.linewise(vim.fn.visualmode())
            end, { desc = 'Toggle comment selection' })

            vim.keymap.set('n', '<leader>cb', function()
                require('Comment.api').toggle.blockwise.current()
            end, { desc = 'Toggle block comment' })
        end,
    },

    -- =============================================================================
    -- MASON & LSP - Language server management
    -- =============================================================================
    {
        "williamboman/mason.nvim",
        config = function()
            require("mason").setup({
                ui = {
                    icons = {
                        package_installed = "✓",
                        package_pending = "➜",
                        package_uninstalled = "✗"
                    }
                }
            })
        end,
    },

    {
        "williamboman/mason-lspconfig.nvim",
        dependencies = { "mason.nvim" },
        config = function()
            require("mason-lspconfig").setup({
                ensure_installed = {
                    "phpactor",
                    "ts_ls",
                    "sqlls",
                    "bashls",
                    "dockerls",
                    "docker_compose_language_service",
                    "html",
                    "cssls",
                    "jsonls",
                    "yamlls",
                    "lua_ls",
                },
                automatic_installation = true,
            })
        end,
    },

    -- =============================================================================
    -- FORMATTING SUPPORT - Mason tools for formatting
    -- =============================================================================
    {
        "jay-babu/mason-null-ls.nvim",
        dependencies = {
            "williamboman/mason.nvim",
            "nvimtools/none-ls.nvim",
        },
        config = function()
            require("mason-null-ls").setup({
                ensure_installed = {
                    -- Formatters
                    "prettier",     -- JS/TS/HTML/CSS/JSON/YAML
                    "php_cs_fixer", -- PHP
                    "black",        -- Python (if needed)
                    "shfmt",        -- Shell scripts
                    "sqlfluff",     -- SQL
                    -- Linters
                    "eslint_d",     -- JS/TS
                    "phpcs",        -- PHP
                    "shellcheck",   -- Shell scripts
                    "sqlfluff",     -- SQL
                },
                automatic_installation = true,
            })

            local null_ls = require("null-ls")
            null_ls.setup({
                sources = {
                    -- Formatters
                    null_ls.builtins.formatting.prettier.with({
                        filetypes = { "javascript", "typescript", "css", "html", "json", "yaml", "markdown" },
                    }),
                    null_ls.builtins.formatting.php_cs_fixer,
                    null_ls.builtins.formatting.shfmt,
                    null_ls.builtins.formatting.sqlfluff.with({
                        extra_args = { "--dialect", "mysql" },
                    }),
                    -- Linters
                    null_ls.builtins.diagnostics.eslint_d,
                    null_ls.builtins.diagnostics.phpcs,
                    null_ls.builtins.diagnostics.shellcheck,
                    null_ls.builtins.diagnostics.sqlfluff.with({
                        extra_args = { "--dialect", "mysql" },
                    }),
                },
            })

            -- Formatting keymaps
            vim.keymap.set('n', '<leader>xf', function()
                vim.lsp.buf.format({ async = true })
            end, { desc = 'Format file' })

            vim.keymap.set('v', '<leader>xf', function()
                vim.lsp.buf.format({ async = true })
            end, { desc = 'Format selection' })
        end,
    },

    {
        "neovim/nvim-lspconfig",
        dependencies = { "mason-lspconfig.nvim" },
        config = function()
            local lspconfig = require("lspconfig")
            local capabilities = require("blink.cmp").get_lsp_capabilities()

            -- Common on_attach function
            local function on_attach(client, bufnr)
                vim.keymap.set('i', '<Esc>', '<Esc>', { buffer = bufnr, noremap = true, silent = true })

                local opts = { noremap = true, silent = true, buffer = bufnr }
                vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)
                vim.keymap.set('n', 'gd', vim.lsp.buf.definition, opts)
                vim.keymap.set('n', 'K', vim.lsp.buf.hover, opts)
                vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, opts)
                vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, opts)
                vim.keymap.set('n', '<leader>wa', vim.lsp.buf.add_workspace_folder, opts)
                vim.keymap.set('n', '<leader>wr', vim.lsp.buf.remove_workspace_folder, opts)
                vim.keymap.set('n', '<leader>wl', function()
                    print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
                end, opts)
                vim.keymap.set('n', '<leader>D', vim.lsp.buf.type_definition, opts)
                vim.keymap.set('n', '<leader>rn', vim.lsp.buf.rename, opts)
                vim.keymap.set('n', '<leader>ca', vim.lsp.buf.code_action, opts)
                vim.keymap.set('n', 'gr', vim.lsp.buf.references, opts)
            end

            -- Setup language servers
            local servers = {
                phpactor = {
                    settings = {
                        phpactor = {
                            completion = { enabled = true },
                            hover = { enabled = true },
                            signature_help = { enabled = true },
                        },
                    },
                },
                ts_ls = {
                    settings = {
                        typescript = {
                            inlayHints = {
                                includeInlayParameterNameHints = 'all',
                                includeInlayParameterNameHintsWhenArgumentMatchesName = false,
                                includeInlayFunctionParameterTypeHints = true,
                                includeInlayVariableTypeHints = true,
                                includeInlayPropertyDeclarationTypeHints = true,
                                includeInlayFunctionLikeReturnTypeHints = true,
                                includeInlayEnumMemberValueHints = true,
                            },
                        },
                    },
                },
                lua_ls = {
                    settings = {
                        Lua = {
                            runtime = { version = 'LuaJIT' },
                            diagnostics = { globals = { 'vim' } },
                            workspace = { library = vim.api.nvim_get_runtime_file("", true) },
                            telemetry = { enable = false },
                        },
                    },
                },
            }

            for server, config in pairs(servers) do
                lspconfig[server].setup(vim.tbl_deep_extend("force", {
                    capabilities = capabilities,
                    on_attach = on_attach,
                }, config))
            end

            -- Simple setup for other servers
            local simple_servers = { "sqlls", "bashls", "dockerls", "docker_compose_language_service", "html", "cssls",
                "jsonls", "yamlls" }
            for _, server in ipairs(simple_servers) do
                lspconfig[server].setup({
                    capabilities = capabilities,
                    on_attach = on_attach,
                })
            end
        end,
    },

    -- =============================================================================
    -- DEBUG ADAPTERS AND UI
    -- =============================================================================
    {
        "mfussenegger/nvim-dap",
        dependencies = {
            "rcarriga/nvim-dap-ui",
            "theHamsta/nvim-dap-virtual-text",
            "nvim-neotest/nvim-nio",
        },
        config = function()
            local dap = require("dap")
            local dapui = require("dapui")

            -- Setup DAP UI
            dapui.setup({
                icons = { expanded = "", collapsed = "", current_frame = "" },
                mappings = {
                    expand = { "<CR>", "<2-LeftMouse>" },
                    open = "o",
                    remove = "d",
                    edit = "e",
                    repl = "r",
                    toggle = "t",
                },
                element_mappings = {},
                expand_lines = vim.fn.has("nvim-0.7") == 1,
                layouts = {
                    {
                        elements = {
                            { id = "scopes", size = 0.25 },
                            "breakpoints",
                            "stacks",
                            "watches",
                        },
                        size = 40,
                        position = "left",
                    },
                    {
                        elements = {
                            "repl",
                            "console",
                        },
                        size = 0.25,
                        position = "bottom",
                    },
                },
                controls = {
                    enabled = true,
                    element = "repl",
                    icons = {
                        pause = "",
                        play = "",
                        step_into = "",
                        step_over = "",
                        step_out = "",
                        step_back = "",
                        run_last = "",
                        terminate = "",
                    },
                },
                floating = {
                    max_height = nil,
                    max_width = nil,
                    border = "single",
                    mappings = {
                        close = { "q", "<Esc>" },
                    },
                },
                windows = { indent = 1 },
                render = {
                    max_type_length = nil,
                    max_value_lines = 100,
                }
            })

            -- Setup virtual text
            require("nvim-dap-virtual-text").setup({
                enabled = true,
                enabled_commands = true,
                highlight_changed_variables = true,
                highlight_new_as_changed = false,
                show_stop_reason = true,
                commented = false,
                only_first_definition = true,
                all_references = false,
                filter_references_pattern = '<module',
                virt_text_pos = 'eol',
                all_frames = false,
                virt_lines = false,
                virt_text_win_col = nil
            })

            -- Auto open/close DAP UI
            dap.listeners.after.event_initialized["dapui_config"] = function()
                dapui.open()
            end
            dap.listeners.before.event_terminated["dapui_config"] = function()
                dapui.close()
            end
            dap.listeners.before.event_exited["dapui_config"] = function()
                dapui.close()
            end

            -- PHP Debug Adapter (Xdebug)
            dap.adapters.php = {
                type = 'executable',
                command = 'node',
                args = { vim.fn.stdpath('data') .. '/mason/packages/php-debug-adapter/extension/out/phpDebug.js' }
            }

            dap.configurations.php = {
                {
                    type = 'php',
                    request = 'launch',
                    name = 'Listen for Xdebug',
                    port = 9003,
                    log = false,
                    pathMappings = {
                        ["/var/www/html"] = vim.fn.getcwd(),
                    },
                },
            }

            -- Node.js Debug Adapter
            dap.adapters.node2 = {
                type = 'executable',
                command = 'node',
                args = { vim.fn.stdpath('data') .. '/mason/packages/node-debug2-adapter/out/src/nodeDebug.js' },
            }

            dap.configurations.typescript = {
                {
                    name = 'Launch',
                    type = 'node2',
                    request = 'launch',
                    program = '${file}',
                    cwd = vim.fn.getcwd(),
                    sourceMaps = true,
                    protocol = 'inspector',
                    console = 'integratedTerminal',
                },
            }
            dap.configurations.javascript = dap.configurations.typescript

            -- Debug keymaps
            vim.keymap.set('n', '<leader>db', dap.toggle_breakpoint, { desc = "Toggle breakpoint" })
            vim.keymap.set('n', '<leader>dB', function()
                dap.set_breakpoint(vim.fn.input('Breakpoint condition: '))
            end, { desc = "Set conditional breakpoint" })
            vim.keymap.set('n', '<leader>dc', dap.continue, { desc = "Continue" })
            vim.keymap.set('n', '<leader>dC', dap.run_to_cursor, { desc = "Run to cursor" })
            vim.keymap.set('n', '<leader>dg', dap.goto_, { desc = "Go to line (no execute)" })
            vim.keymap.set('n', '<leader>di', dap.step_into, { desc = "Step into" })
            vim.keymap.set('n', '<leader>dj', dap.down, { desc = "Down" })
            vim.keymap.set('n', '<leader>dk', dap.up, { desc = "Up" })
            vim.keymap.set('n', '<leader>dl', dap.run_last, { desc = "Run last" })
            vim.keymap.set('n', '<leader>do', dap.step_over, { desc = "Step over" })
            vim.keymap.set('n', '<leader>dO', dap.step_out, { desc = "Step out" })
            vim.keymap.set('n', '<leader>dp', dap.pause, { desc = "Pause" })
            vim.keymap.set('n', '<leader>dr', dap.repl.toggle, { desc = "Toggle REPL" })
            vim.keymap.set('n', '<leader>ds', dap.session, { desc = "Session" })
            vim.keymap.set('n', '<leader>dt', dap.terminate, { desc = "Terminate" })
            vim.keymap.set('n', '<leader>dw', function()
                require("dap.ui.widgets").hover()
            end, { desc = "Widgets" })
            vim.keymap.set('n', '<leader>du', dapui.toggle, { desc = "Toggle DAP UI" })
        end,
    },

    {
        "jay-babu/mason-nvim-dap.nvim",
        dependencies = { "mason.nvim", "nvim-dap" },
        config = function()
            require("mason-nvim-dap").setup({
                ensure_installed = {
                    "php-debug-adapter",
                    "node-debug2-adapter",
                    "bash-debug-adapter",
                },
                automatic_installation = true,
            })
        end,
    },

    -- =============================================================================
    -- KULALA - HTTP Client for API testing
    -- =============================================================================
    {
        "mistweaverco/kulala.nvim",
        config = function()
            require("kulala").setup({
                -- Default request timeout
                default_timeout = 30000,
                -- Enable debug mode
                debug = false,
                -- Default headers
                default_headers = {},
                -- Default env vars
                default_env = {},
                -- Enable syntax highlighting for http files
                syntax_highlighting = {
                    enabled = true,
                },
                -- Winbar options
                winbar = {
                    enabled = true,
                },
                -- Response display options
                display = {
                    show_icons = true,
                    show_curl_command = false,
                }
            })

            -- HTTP client keymaps
            vim.keymap.set('n', '<leader>hr', function()
                require('kulala').run()
            end, { desc = "Run HTTP request" })

            vim.keymap.set('n', '<leader>hp', function()
                require('kulala').run_all()
            end, { desc = "Run all HTTP requests" })

            vim.keymap.set('n', '<leader>hh', function()
                require('kulala').toggle_view()
            end, { desc = "Toggle HTTP response view" })

            vim.keymap.set('n', '<leader>hc', function()
                require('kulala').copy()
            end, { desc = "Copy HTTP request as curl" })

            vim.keymap.set('n', '<leader>hi', function()
                require('kulala').inspect()
            end, { desc = "Inspect HTTP request" })

            vim.keymap.set('n', '<leader>ht', function()
                require('kulala').toggle()
            end, { desc = "Toggle HTTP client" })

            -- Auto-detect http files
            vim.api.nvim_create_autocmd("BufRead", {
                pattern = "*.http",
                callback = function()
                    vim.bo.filetype = "http"
                end,
            })
        end,
    },

    -- =============================================================================
    -- KIWI - Note-taking system
    -- =============================================================================
    {
        "serenevoid/kiwi.nvim",
        dependencies = { "nvim-lua/plenary.nvim" },
        config = function()
            require("kiwi").setup({
                {
                    name = "work",
                    path = vim.fn.expand("~/notes/work"),
                },
                {
                    name = "personal",
                    path = vim.fn.expand("~/notes/personal"),
                },
            })

            -- Note-taking keymaps
            vim.keymap.set('n', '<leader>nw', function()
                require('kiwi').open_wiki_index("work")
            end, { desc = "Open work notes" })

            vim.keymap.set('n', '<leader>np', function()
                require('kiwi').open_wiki_index("personal")
            end, { desc = "Open personal notes" })

            vim.keymap.set('n', '<leader>nt', function()
                require('kiwi').todo.toggle()
            end, { desc = "Toggle todo item" })

            vim.keymap.set('n', '<leader>nT', function()
                require('kiwi').todo.toggle("TODO")
            end, { desc = "Toggle TODO item" })

            vim.keymap.set('n', '<leader>nd', function()
                local date = os.date("%Y-%m-%d")
                require('kiwi').open_wiki_index("work")
                vim.cmd("edit " .. date .. ".md")
            end, { desc = "Daily work note" })

            vim.keymap.set('n', '<leader>nf', function()
                require('telescope.builtin').find_files({
                    prompt_title = "Notes",
                    cwd = vim.fn.expand("~/notes"),
                })
            end, { desc = "Find notes" })

            vim.keymap.set('n', '<leader>ng', function()
                require('telescope.builtin').live_grep({
                    prompt_title = "Search Notes",
                    cwd = vim.fn.expand("~/notes"),
                })
            end, { desc = "Search in notes" })
        end,
    },

    -- =============================================================================
    -- COMPLETION - Blink.cmp
    -- =============================================================================
    {
        'saghen/blink.cmp',
        dependencies = 'rafamadriz/friendly-snippets',
        version = '*',
        opts = {
            keymap = {
                preset = 'default',
                ['<Esc>'] = { 'hide', 'fallback' },
                ['<C-c>'] = { 'hide', 'fallback' },
            },
            appearance = {
                use_nvim_cmp_as_default = true,
                nerd_font_variant = 'mono'
            },
            sources = {
                default = { 'lsp', 'path', 'snippets', 'buffer' },
            },
            completion = {
                accept = {
                    auto_brackets = { enabled = true },
                },
                menu = {
                    draw = { treesitter = { "lsp" } },
                },
                documentation = {
                    auto_show = true,
                    auto_show_delay_ms = 200,
                },
                ghost_text = { enabled = vim.g.ai_cmp },
            },
        },
        opts_extend = { "sources.default" }
    },

    -- =============================================================================
    -- AI ASSISTANT - CodeCompanion with Copilot
    -- =============================================================================
    {
        "olimorris/codecompanion.nvim",
        dependencies = {
            "nvim-lua/plenary.nvim",
            "nvim-treesitter/nvim-treesitter",
            { "stevearc/dressing.nvim", opts = {} },
        },
        config = function()
            require("codecompanion").setup({
                strategies = {
                    chat = { adapter = "copilot" },
                    inline = { adapter = "copilot" },
                },
                adapters = {
                    copilot = function()
                        return require("codecompanion.adapters").extend("copilot", {
                            schema = { model = { default = "gpt-4o" } },
                        })
                    end,
                },
                auto_suggestions = true,
                display = {
                    action_palette = { width = 95, height = 10 },
                    chat = { window = { layout = "vertical" } },
                },
            })

            vim.keymap.set({ "n", "v" }, "<C-a>", "<cmd>CodeCompanionActions<cr>", { desc = "CodeCompanion actions" })
            vim.keymap.set({ "n", "v" }, "<leader>ca", "<cmd>CodeCompanionChat Toggle<cr>", { desc = "Toggle AI chat" })
            vim.keymap.set("v", "<leader>ce", "<cmd>CodeCompanionChat Add<cr>", { desc = "Add to AI chat" })

            vim.cmd([[cab cc CodeCompanion]])
        end,
    },

    {
        "github/copilot.vim",
        config = function()
            vim.g.copilot_no_tab_map = true
            vim.g.copilot_assume_mapped = true
            vim.g.copilot_tab_fallback = ""

            vim.keymap.set("i", "<C-J>", 'copilot#Accept("")', { silent = true, expr = true, desc = "Accept Copilot" })
            vim.keymap.set("i", "<C-\\>", "<Plug>(copilot-suggest)", { desc = "Suggest Copilot" })
            vim.keymap.set("i", "<M-[>", "<Plug>(copilot-previous)", { desc = "Previous Copilot" })
            vim.keymap.set("i", "<M-]>", "<Plug>(copilot-next)", { desc = "Next Copilot" })
            vim.keymap.set("i", "<C-O>", "<Plug>(copilot-dismiss)", { desc = "Dismiss Copilot" })
        end,
    },

    -- =============================================================================
    -- ADDITIONAL ESSENTIAL PLUGINS
    -- =============================================================================

    -- Git integration
    {
        "lewis6991/gitsigns.nvim",
        config = function()
            require('gitsigns').setup({
                signs = {
                    add          = { text = '│' },
                    change       = { text = '│' },
                    delete       = { text = '_' },
                    topdelete    = { text = '‾' },
                    changedelete = { text = '~' },
                    untracked    = { text = '┆' },
                },
                on_attach = function(bufnr)
                    local gs = package.loaded.gitsigns

                    vim.keymap.set('n', '<leader>gb', function() gs.blame_line { full = true } end,
                        { buffer = bufnr, desc = "Git blame line" })
                    vim.keymap.set('n', '<leader>gd', gs.diffthis, { buffer = bufnr, desc = "Git diff" })
                    vim.keymap.set('n', '<leader>gp', gs.preview_hunk, { buffer = bufnr, desc = "Preview hunk" })
                    vim.keymap.set('n', '<leader>gr', gs.reset_hunk, { buffer = bufnr, desc = "Reset hunk" })
                    vim.keymap.set('n', '<leader>gS', gs.stage_hunk, { buffer = bufnr, desc = "Stage hunk" })
                    vim.keymap.set('n', ']c', function()
                        if vim.wo.diff then return ']c' end
                        vim.schedule(function() gs.next_hunk() end)
                        return '<Ignore>'
                    end, { expr = true, buffer = bufnr, desc = "Next hunk" })
                    vim.keymap.set('n', '[c', function()
                        if vim.wo.diff then return '[c' end
                        vim.schedule(function() gs.prev_hunk() end)
                        return '<Ignore>'
                    end, { expr = true, buffer = bufnr, desc = "Previous hunk" })
                end
            })
        end,
    },

    -- Status line
    {
        'nvim-lualine/lualine.nvim',
        dependencies = { 'nvim-tree/nvim-web-devicons' },
        config = function()
            require('lualine').setup({
                options = {
                    theme = 'auto',
                    component_separators = { left = '', right = '' },
                    section_separators = { left = '', right = '' },
                },
                sections = {
                    lualine_a = { 'mode' },
                    lualine_b = { 'branch', 'diff', 'diagnostics' },
                    lualine_c = { 'filename' },
                    lualine_x = { 'encoding', 'fileformat', 'filetype' },
                    lualine_y = { 'progress' },
                    lualine_z = { 'location' }
                },
            })
        end,
    },

    -- Terminal integration
    {
        "akinsho/toggleterm.nvim",
        version = "*",
        config = function()
            require("toggleterm").setup({
                size = 20,
                open_mapping = [[<c-\>]],
                hide_numbers = true,
                shade_terminals = true,
                shading_factor = 2,
                start_in_insert = true,
                insert_mappings = true,
                persist_size = true,
                direction = "float",
                close_on_exit = true,
                shell = vim.o.shell,
                float_opts = {
                    border = "curved",
                    winblend = 0,
                    highlights = {
                        border = "Normal",
                        background = "Normal",
                    },
                },
            })

            vim.keymap.set('n', '<leader>tt', '<cmd>ToggleTerm<cr>', { desc = "Toggle terminal" })
            vim.keymap.set('n', '<leader>tf', '<cmd>ToggleTerm direction=float<cr>', { desc = "Float terminal" })
            vim.keymap.set('n', '<leader>th', '<cmd>ToggleTerm size=10 direction=horizontal<cr>',
                { desc = "Horizontal terminal" })
            vim.keymap.set('n', '<leader>tv', '<cmd>ToggleTerm size=80 direction=vertical<cr>',
                { desc = "Vertical terminal" })
        end,
    },

}, {
    ui = {
        icons = {
            cmd = "⌘",
            config = "🛠",
            event = "📅",
            ft = "📂",
            init = "⚙",
            keys = "🗝",
            plugin = "🔌",
            runtime = "💻",
            require = "🌙",
            source = "📄",
            start = "🚀",
            task = "📌",
            lazy = "💤 ",
        },
    },
})

-- =============================================================================
-- POST-PLUGIN ESCAPE KEY REINFORCEMENT
-- =============================================================================

vim.api.nvim_create_autocmd("VimEnter", {
    callback = function()
        vim.keymap.set('i', '<Esc>', '<Esc>', { noremap = true, silent = true })
        vim.keymap.set('i', 'jk', '<Esc>', { noremap = true, silent = true })
        vim.keymap.set('i', 'kj', '<Esc>', { noremap = true, silent = true })
        vim.keymap.set('i', '<C-c>', '<Esc>', { noremap = true, silent = true })
    end,
})

vim.api.nvim_create_autocmd("BufEnter", {
    callback = function()
        vim.keymap.set('i', '<Esc>', '<Esc>', { buffer = true, noremap = true, silent = true })
    end,
})

-- =============================================================================
-- ADDITIONAL KEYMAPS AND SETTINGS
-- =============================================================================

-- Basic navigation
vim.keymap.set("v", "J", ":m '>+1<CR>gv=gv", { desc = "Move line down" })
vim.keymap.set("v", "K", ":m '<-2<CR>gv=gv", { desc = "Move line up" })
vim.keymap.set("n", "J", "mzJ`z", { desc = "Join lines" })
vim.keymap.set("n", "<C-d>", "<C-d>zz", { desc = "Half page down" })
vim.keymap.set("n", "<C-u>", "<C-u>zz", { desc = "Half page up" })
vim.keymap.set("n", "n", "nzzzv", { desc = "Next search result" })
vim.keymap.set("n", "N", "Nzzzv", { desc = "Previous search result" })

-- Buffer management
vim.keymap.set('n', '<leader>bd', '<cmd>bdelete<cr>', { desc = "Delete buffer" })
vim.keymap.set('n', '<leader>bn', '<cmd>bnext<cr>', { desc = "Next buffer" })
vim.keymap.set('n', '<leader>bp', '<cmd>bprevious<cr>', { desc = "Previous buffer" })

-- Window management
vim.keymap.set('n', '<leader>wh', '<C-w>h', { desc = "Go to left window" })
vim.keymap.set('n', '<leader>wj', '<C-w>j', { desc = "Go to lower window" })
vim.keymap.set('n', '<leader>wk', '<C-w>k', { desc = "Go to upper window" })
vim.keymap.set('n', '<leader>wl', '<C-w>l', { desc = "Go to right window" })
vim.keymap.set('n', '<leader>ws', '<C-w>s', { desc = "Split window horizontally" })
vim.keymap.set('n', '<leader>wv', '<C-w>v', { desc = "Split window vertically" })
vim.keymap.set('n', '<leader>wq', '<C-w>q', { desc = "Close window" })

-- LSP diagnostics
vim.diagnostic.config({
    virtual_text = true,
    signs = true,
    underline = true,
    update_in_insert = false,
    severity_sort = false,
})

vim.keymap.set('n', '<leader>le', vim.diagnostic.open_float, { desc = "Show diagnostic" })
vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, { desc = "Previous diagnostic" })
vim.keymap.set('n', ']d', vim.diagnostic.goto_next, { desc = "Next diagnostic" })
vim.keymap.set('n', '<leader>lq', vim.diagnostic.setloclist, { desc = "Diagnostic list" })

-- Auto-formatting on save
vim.api.nvim_create_autocmd("BufWritePre", {
    pattern = { "*.php", "*.ts", "*.js", "*.tsx", "*.jsx", "*.html", "*.css", "*.json", "*.yaml" },
    callback = function()
        vim.lsp.buf.format({ async = false })
    end,
})

print("🚀 Comprehensive development environment loaded!")
print("✅ All features: Formatting, Comments, Debug, HTTP Client, File Explorer, Notes")
